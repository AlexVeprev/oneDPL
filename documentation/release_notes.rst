IntelÂ® oneAPI DPC++ Library (oneDPL) Release Notes (Beta)
##########################################################

Overview
========

Learn more about the new features and known issues for this library.

New in 2021.1-beta08
====================

New Features
-----------------------------
- Added random number generation functionality in ``<oneapi/dpl/random>``:

  - ``linear_congruential_engine``, ``subtract_with_carry_engine``, ``discard_block_engine``;
  - predefined engine instantiations, including ``minstd_rand`` and ``ranlux48``;
  - ``uniform_real_distribution``, ``uniform_int_distribution``, ``normal_distribution``.

- Added implicit conversion of a DPC++ policy to ``sycl::queue``.
- Added the ``ONEDPL_STANDARD_POLICIES_ONLY`` macro (defaults to 0) that makes
  the DPC++ policies unavailable, avoiding dependency on the DPC++ compiler
  and limiting oneDPL algorithms to only use the standard C++ policies
  (``seq``, ``par``, ``unseq``, ``par_unseq``) for the host CPUs.
  It replaces the former ``_PSTL_BACKEND_SYCL`` macro with the opposite meaning.
- Added ``permutation_iterator`` and ``discard_iterator`` in ``<oneapi/dpl/iterator>``.

Changes to Existing Features
-----------------------------
- Improved performance of the ``sort`` and ``stable_sort`` algorithms
  with ``device_policy`` for non-arithmetic data types.
- The ``dpstd`` include folder was renamed. Include ``<oneapi/dpl/...>`` headers
  instead of ``<dpstd/...>``.
- The main namespace of the library changed to ``oneapi::dpl``. The ``dpstd``
  namespace is deprecated, and will be removed in one of the next releases.

- The following API elements of oneDPL were changed or removed:

  - the ``default_policy`` object was renamed to ``dpcpp_default``;
  - the ``fpga_policy`` object was renamed to ``dpcpp_fpga``;
  - the ``fpga_device_policy`` class was renamed to ``fpga_policy``;
  - the ``_PSTL_FPGA_DEVICE`` macro was renamed to ``ONEDPL_FPGA_DEVICE``;
  - the ``_PSTL_FPGA_EMU`` macro was renamed to ``ONEDPL_FPGA_EMULATOR``;
  - the ``_PSTL_COMPILE_KERNEL`` macro was removed;
  - the ``_PSTL_BACKEND_SYCL`` macro was removed.

  The ``default_policy``, ``fpga_device_policy`` names are deprecated,
  and will be removed in one of the next releases. Other previous names
  are no more valid.

Fixed Issues
-------------
- Fixed scan-based algorithms to not rely on independent forward progress for workgroups.

Known Issues
-------------
- On the DPC++ CPU device, RNG sequences produced by ``discard_block_engine`` may deviate
  from those generated by other implementations of the engine.
- If <oneapi/dpl/random> is included into code before other oneDPL header files, compilation 
  can fail. In order to avoid failures, include <oneapi/dpl/random> after any other oneDPL header file.
- The following algorithms may be significantly slower with ``device_policy``
  than in previous Beta releases: ``copy_if``, ``exclusive_scan``, ``inclusive_scan``, ``partition``,
  ``partition_copy``, ``remove``, ``remove_copy``, ``remove_if``, ``set_difference``,
  ``set_intersection``, ``set_symmetric_difference``, ``set_union``, ``stable_partition``,
  ``transform_exclusive_scan``, ``transform_inclusive_scan``, ``unique``, ``unique_copy``.
- The ``sort``, ``stable_sort``, ``partial_sort``, ``partial_sort_copy`` algorithms
  may work incorrectly on CPU device and on GPU with DPC++ L0 backend.
- Some algorithms with a DPC++ policy may fail on CPU or on FPGA emulator.
- ``std::tuple`` cannot be used with SYCL buffers to transfer data between host and device.
- When used within DPC++ kernels or transferred to/from a device, ``std::tuple, std::pair``,
  and ``std::array`` can only hold objects whose type meets DPC++ requirements for use in kernels
  and for data transfer, respectively.
- ``std::array::at`` member function cannot be used in kernels because it may throw an exception;
  use ``std::array::operator[]`` instead.
- ``std::array`` member function swap cannot be used in DPC++ kernels on Windows* platform.
- ``std::swap`` for ``std::array`` cannot work in DPC++ kernels on Windows platform.
- Not all functions in <cmath> are supported currently, please refer to DPC++ library guide for detail list.
- Due to specifics of Microsoft* Visual C++ implementation, some standard math functions for float
  (including: ``std::ldexp``, ``std::frexp``, ``std::sqrt(std::complex<float>)``) require device support
  for double precision.
